type Action m
  = Loc ->
    ByteString ->
    Int ->
    ParserT m Token

lex :: MonadError ParseException m => ParserT m Token
lex = do
  s@(S {..}) <- getInput
  case alexScan s 0 of
    AlexEOF ->
      return $ Token (Loc pos pos) EOF
    
    AlexError (S { pos = pos' }) ->
      throwError $ LexicalError (Loc pos pos')
    
    AlexSkip s' _ -> do
      putInput s'
      lex
    
    AlexToken s'@(S pos' _) n m -> do
      putInput s'
      let l = Loc pos pos'
      m l buffer n
